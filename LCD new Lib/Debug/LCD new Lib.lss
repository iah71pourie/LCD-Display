
LCD new Lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00000346  000003ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000346  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010e5  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090f  00000000  00000000  00001641  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000659  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  000025ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a2  00000000  00000000  0000273c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000886  00000000  00000000  00002bde  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003464  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 39       	cpi	r26, 0x9A	; 154
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 80 01 	call	0x300	; 0x300 <main>
  8e:	0c 94 a1 01 	jmp	0x342	; 0x342 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_enable>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	5b 9a       	sbi	0x0b, 3	; 11
  98:	8a e6       	ldi	r24, 0x6A	; 106
  9a:	8a 95       	dec	r24
  9c:	f1 f7       	brne	.-4      	; 0x9a <lcd_enable+0x4>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <lcd_enable+0xa>
  a0:	5b 98       	cbi	0x0b, 3	; 11
  a2:	08 95       	ret

000000a4 <lcd_out>:
  a4:	9b b1       	in	r25, 0x0b	; 11
  a6:	9f 70       	andi	r25, 0x0F	; 15
  a8:	9b b9       	out	0x0b, r25	; 11
  aa:	9b b1       	in	r25, 0x0b	; 11
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	98 2b       	or	r25, r24
  b0:	9b b9       	out	0x0b, r25	; 11
  b2:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_enable>
  b6:	08 95       	ret

000000b8 <lcd_data>:
  b8:	cf 93       	push	r28
  ba:	c8 2f       	mov	r28, r24
  bc:	5a 9a       	sbi	0x0b, 2	; 11
  be:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_out>
  c2:	8c 2f       	mov	r24, r28
  c4:	82 95       	swap	r24
  c6:	80 7f       	andi	r24, 0xF0	; 240
  c8:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_out>
  cc:	85 ef       	ldi	r24, 0xF5	; 245
  ce:	8a 95       	dec	r24
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_data+0x16>
  d2:	00 00       	nop
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <lcd_command>:
  d8:	cf 93       	push	r28
  da:	c8 2f       	mov	r28, r24
  dc:	5a 98       	cbi	0x0b, 2	; 11
  de:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_out>
  e2:	8c 2f       	mov	r24, r28
  e4:	82 95       	swap	r24
  e6:	80 7f       	andi	r24, 0xF0	; 240
  e8:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_out>
  ec:	80 ee       	ldi	r24, 0xE0	; 224
  ee:	8a 95       	dec	r24
  f0:	f1 f7       	brne	.-4      	; 0xee <lcd_command+0x16>
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <lcd_clear>:
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_command>
  fc:	8f e3       	ldi	r24, 0x3F	; 63
  fe:	9f e1       	ldi	r25, 0x1F	; 31
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_clear+0xa>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_clear+0x10>
 106:	00 00       	nop
 108:	08 95       	ret

0000010a <lcd_init>:
 10a:	8a b1       	in	r24, 0x0a	; 10
 10c:	8c 6f       	ori	r24, 0xFC	; 252
 10e:	8a b9       	out	0x0a, r24	; 10
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	83 70       	andi	r24, 0x03	; 3
 114:	8b b9       	out	0x0b, r24	; 11
 116:	8f e5       	ldi	r24, 0x5F	; 95
 118:	9a ee       	ldi	r25, 0xEA	; 234
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_init+0x10>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_init+0x16>
 120:	00 00       	nop
 122:	80 e3       	ldi	r24, 0x30	; 48
 124:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_out>
 128:	8f e1       	ldi	r24, 0x1F	; 31
 12a:	9e e4       	ldi	r25, 0x4E	; 78
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_init+0x22>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_init+0x28>
 132:	00 00       	nop
 134:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_enable>
 138:	8f e9       	ldi	r24, 0x9F	; 159
 13a:	9f e0       	ldi	r25, 0x0F	; 15
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_init+0x32>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_init+0x38>
 142:	00 00       	nop
 144:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_enable>
 148:	8f e9       	ldi	r24, 0x9F	; 159
 14a:	9f e0       	ldi	r25, 0x0F	; 15
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_init+0x42>
 150:	00 c0       	rjmp	.+0      	; 0x152 <lcd_init+0x48>
 152:	00 00       	nop
 154:	80 e2       	ldi	r24, 0x20	; 32
 156:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_out>
 15a:	8f e1       	ldi	r24, 0x1F	; 31
 15c:	9e e4       	ldi	r25, 0x4E	; 78
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_init+0x54>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_init+0x5a>
 164:	00 00       	nop
 166:	88 e2       	ldi	r24, 0x28	; 40
 168:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_command>
 16c:	8c e0       	ldi	r24, 0x0C	; 12
 16e:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_command>
 172:	86 e0       	ldi	r24, 0x06	; 6
 174:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_command>
 178:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_clear>
 17c:	08 95       	ret

0000017e <lcd_setcursor>:

void lcd_setcursor( uint8_t x, uint8_t y )
{
	uint8_t data;
	
	switch (y)
 17e:	62 30       	cpi	r22, 0x02	; 2
 180:	59 f0       	breq	.+22     	; 0x198 <lcd_setcursor+0x1a>
 182:	18 f4       	brcc	.+6      	; 0x18a <lcd_setcursor+0xc>
 184:	61 30       	cpi	r22, 0x01	; 1
 186:	31 f0       	breq	.+12     	; 0x194 <lcd_setcursor+0x16>
 188:	08 95       	ret
 18a:	63 30       	cpi	r22, 0x03	; 3
 18c:	39 f0       	breq	.+14     	; 0x19c <lcd_setcursor+0x1e>
 18e:	64 30       	cpi	r22, 0x04	; 4
 190:	39 f0       	breq	.+14     	; 0x1a0 <lcd_setcursor+0x22>
 192:	08 95       	ret
	{
		case 1:    // 1. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE1 + x;
 194:	80 58       	subi	r24, 0x80	; 128
		break;
 196:	05 c0       	rjmp	.+10     	; 0x1a2 <lcd_setcursor+0x24>
		
		case 2:    // 2. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE2 + x;
 198:	80 54       	subi	r24, 0x40	; 64
		break;
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <lcd_setcursor+0x24>
		
		case 3:    // 3. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE3 + x;
 19c:	80 57       	subi	r24, 0x70	; 112
		break;
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <lcd_setcursor+0x24>
		
		case 4:    // 4. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE4 + x;
 1a0:	80 53       	subi	r24, 0x30	; 48
		
		default:
		return;                                   // für den Fall einer falschen Zeile
	}
	
	lcd_command( data );
 1a2:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_command>
 1a6:	08 95       	ret

000001a8 <lcd_string>:

////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
{
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	ec 01       	movw	r28, r24
	while( *data != '\0' )
 1ae:	88 81       	ld	r24, Y
 1b0:	88 23       	and	r24, r24
 1b2:	31 f0       	breq	.+12     	; 0x1c0 <lcd_string+0x18>
 1b4:	21 96       	adiw	r28, 0x01	; 1
	lcd_data( *data++ );
 1b6:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
{
	while( *data != '\0' )
 1ba:	89 91       	ld	r24, Y+
 1bc:	81 11       	cpse	r24, r1
 1be:	fb cf       	rjmp	.-10     	; 0x1b6 <lcd_string+0xe>
	lcd_data( *data++ );
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_clr_row>:
		_delay_ms(500);
	}
}

void lcd_clr_row(uint8_t row)
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	60 97       	sbiw	r28, 0x10	; 16
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	de bf       	out	0x3e, r29	; 62
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	cd bf       	out	0x3d, r28	; 61
	uint8_t clear[16] = "                ";
 1da:	90 e1       	ldi	r25, 0x10	; 16
 1dc:	e8 e8       	ldi	r30, 0x88	; 136
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	de 01       	movw	r26, r28
 1e2:	11 96       	adiw	r26, 0x01	; 1
 1e4:	01 90       	ld	r0, Z+
 1e6:	0d 92       	st	X+, r0
 1e8:	9a 95       	dec	r25
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <lcd_clr_row+0x1e>
	lcd_setcursor(0, row);
 1ec:	68 2f       	mov	r22, r24
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_setcursor>
	lcd_string(clear);
 1f4:	ce 01       	movw	r24, r28
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_string>
 1fc:	60 96       	adiw	r28, 0x10	; 16
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <textlauf>:

	return 0;
}

void textlauf(uint8_t location[], uint8_t temp[], uint8_t tempsize, uint8_t row)
{
 20e:	3f 92       	push	r3
 210:	4f 92       	push	r4
 212:	5f 92       	push	r5
 214:	6f 92       	push	r6
 216:	7f 92       	push	r7
 218:	8f 92       	push	r8
 21a:	9f 92       	push	r9
 21c:	af 92       	push	r10
 21e:	bf 92       	push	r11
 220:	cf 92       	push	r12
 222:	df 92       	push	r13
 224:	ef 92       	push	r14
 226:	ff 92       	push	r15
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	4c 01       	movw	r8, r24
 232:	7b 01       	movw	r14, r22
 234:	42 2e       	mov	r4, r18
	uint8_t startj = 0;
	
	for (uint8_t i = 0; i < 15 + tempsize; i++)
 236:	04 2f       	mov	r16, r20
 238:	10 e0       	ldi	r17, 0x00	; 0
 23a:	c8 01       	movw	r24, r16
 23c:	0f 96       	adiw	r24, 0x0f	; 15
 23e:	5c 01       	movw	r10, r24
 240:	61 2c       	mov	r6, r1
 242:	51 2c       	mov	r5, r1
	{
		lcd_clr_row(row);
 244:	c2 2e       	mov	r12, r18
 246:	d1 2c       	mov	r13, r1
		
		if(i <= 16)
		{
			lcd_setcursor(16 - i, row);
 248:	68 94       	set
 24a:	33 24       	eor	r3, r3
 24c:	34 f8       	bld	r3, 4
		{
			startj++;
			lcd_setcursor(0, row);
		}
		
		for (	uint8_t j = startj; j < tempsize - 1; j++)
 24e:	01 50       	subi	r16, 0x01	; 1
 250:	11 09       	sbc	r17, r1
{
	uint8_t startj = 0;
	
	for (uint8_t i = 0; i < 15 + tempsize; i++)
	{
		lcd_clr_row(row);
 252:	c6 01       	movw	r24, r12
 254:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_clr_row>
		
		if(i <= 16)
 258:	90 e1       	ldi	r25, 0x10	; 16
 25a:	96 15       	cp	r25, r6
 25c:	30 f0       	brcs	.+12     	; 0x26a <textlauf+0x5c>
		{
			lcd_setcursor(16 - i, row);
 25e:	64 2d       	mov	r22, r4
 260:	83 2d       	mov	r24, r3
 262:	86 19       	sub	r24, r6
 264:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_setcursor>
 268:	05 c0       	rjmp	.+10     	; 0x274 <textlauf+0x66>
		}
		else
		{
			startj++;
 26a:	53 94       	inc	r5
			lcd_setcursor(0, row);
 26c:	64 2d       	mov	r22, r4
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_setcursor>
		}
		
		for (	uint8_t j = startj; j < tempsize - 1; j++)
 274:	c5 2d       	mov	r28, r5
 276:	d0 e0       	ldi	r29, 0x00	; 0
 278:	c0 17       	cp	r28, r16
 27a:	d1 07       	cpc	r29, r17
 27c:	c4 f4       	brge	.+48     	; 0x2ae <textlauf+0xa0>
 27e:	ce 01       	movw	r24, r28
 280:	75 2c       	mov	r7, r5
		{
			if(j - startj <= 16)
 282:	8c 1b       	sub	r24, r28
 284:	9d 0b       	sbc	r25, r29
 286:	41 97       	sbiw	r24, 0x11	; 17
 288:	64 f4       	brge	.+24     	; 0x2a2 <textlauf+0x94>
			{
				if(temp[j] == '°')
 28a:	f7 01       	movw	r30, r14
 28c:	e7 0d       	add	r30, r7
 28e:	f1 1d       	adc	r31, r1
 290:	80 81       	ld	r24, Z
 292:	80 3b       	cpi	r24, 0xB0	; 176
 294:	21 f4       	brne	.+8      	; 0x29e <textlauf+0x90>
				{
					lcd_data(0b11011111);
 296:	8f ed       	ldi	r24, 0xDF	; 223
 298:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <textlauf+0x94>
				}
				else
				{
					lcd_data(temp[j]);
 29e:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
		{
			startj++;
			lcd_setcursor(0, row);
		}
		
		for (	uint8_t j = startj; j < tempsize - 1; j++)
 2a2:	73 94       	inc	r7
 2a4:	87 2d       	mov	r24, r7
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	80 17       	cp	r24, r16
 2aa:	91 07       	cpc	r25, r17
 2ac:	54 f3       	brlt	.-44     	; 0x282 <textlauf+0x74>
					lcd_data(temp[j]);
				}
			}
		}
		
		lcd_setcursor(0,row);
 2ae:	64 2d       	mov	r22, r4
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_setcursor>
		lcd_string(location);
 2b6:	c4 01       	movw	r24, r8
 2b8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_string>
 2bc:	2f ef       	ldi	r18, 0xFF	; 255
 2be:	89 e6       	ldi	r24, 0x69	; 105
 2c0:	98 e1       	ldi	r25, 0x18	; 24
 2c2:	21 50       	subi	r18, 0x01	; 1
 2c4:	80 40       	sbci	r24, 0x00	; 0
 2c6:	90 40       	sbci	r25, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <textlauf+0xb4>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <textlauf+0xbe>
 2cc:	00 00       	nop

void textlauf(uint8_t location[], uint8_t temp[], uint8_t tempsize, uint8_t row)
{
	uint8_t startj = 0;
	
	for (uint8_t i = 0; i < 15 + tempsize; i++)
 2ce:	63 94       	inc	r6
 2d0:	86 2d       	mov	r24, r6
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	8a 15       	cp	r24, r10
 2d6:	9b 05       	cpc	r25, r11
 2d8:	0c f4       	brge	.+2      	; 0x2dc <textlauf+0xce>
 2da:	bb cf       	rjmp	.-138    	; 0x252 <textlauf+0x44>
		lcd_setcursor(0,row);
		lcd_string(location);
		
		_delay_ms(500);
	}
}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	ff 90       	pop	r15
 2e6:	ef 90       	pop	r14
 2e8:	df 90       	pop	r13
 2ea:	cf 90       	pop	r12
 2ec:	bf 90       	pop	r11
 2ee:	af 90       	pop	r10
 2f0:	9f 90       	pop	r9
 2f2:	8f 90       	pop	r8
 2f4:	7f 90       	pop	r7
 2f6:	6f 90       	pop	r6
 2f8:	5f 90       	pop	r5
 2fa:	4f 90       	pop	r4
 2fc:	3f 90       	pop	r3
 2fe:	08 95       	ret

00000300 <main>:
uint8_t insideTemp[] = "Temp: 21 °C -- Luftfeuchte: 30%";
uint8_t outsideTemp[] = "Bewoelkt --Temp: 9 °C -- Luftfeuchte: 70% -- Niederschlag: 0% -- Wind: 16km/h";

int main(void)
{
	lcd_init();
 300:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_init>
	
	lcd_clear();
 304:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_clear>
	lcd_setcursor(8 - (uint8_t)(sizeof(date) / 2), 1);
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_setcursor>
	lcd_string(date);
 310:	87 e7       	ldi	r24, 0x77	; 119
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_string>
			
	while(1)
	{
		textlauf(inside, insideTemp, sizeof(insideTemp), 2);
 318:	22 e0       	ldi	r18, 0x02	; 2
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	40 e2       	ldi	r20, 0x20	; 32
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	6e e4       	ldi	r22, 0x4E	; 78
 322:	71 e0       	ldi	r23, 0x01	; 1
 324:	8e e6       	ldi	r24, 0x6E	; 110
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 07 01 	call	0x20e	; 0x20e <textlauf>
		
		textlauf(outside, outsideTemp, sizeof(outsideTemp), 2);
 32c:	22 e0       	ldi	r18, 0x02	; 2
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	4e e4       	ldi	r20, 0x4E	; 78
 332:	50 e0       	ldi	r21, 0x00	; 0
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	71 e0       	ldi	r23, 0x01	; 1
 338:	82 e7       	ldi	r24, 0x72	; 114
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 07 01 	call	0x20e	; 0x20e <textlauf>
 340:	eb cf       	rjmp	.-42     	; 0x318 <main+0x18>

00000342 <_exit>:
 342:	f8 94       	cli

00000344 <__stop_program>:
 344:	ff cf       	rjmp	.-2      	; 0x344 <__stop_program>
